{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport authService from \"./authService\"; //Get user from localStorage\n\nconst user = localStorage.getItem('user');\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\nexport const register = createAsyncThunk('register', async (user, thunkApi) => {\n  try {\n    return await authService.register(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkApi.rejectWithValue(message);\n  }\n});\nexport const authenticate = createAsyncThunk('authenticate', async (user, thunkApi) => {\n  try {\n    return await authService.authenticate(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkApi.rejectWithValue(message);\n  }\n});\nexport const logout = createAsyncThunk('logout', async () => {\n  authService.logout();\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(authenticate.pending, state => {\n      state.isLoading = true;\n    }).addCase(authenticate.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(authenticate.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = action.payload;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(logout.fulfilled, state => {\n      state.user = null;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/bayannidal/Coding Area/Redux/my-app/src/features/auth/authSlice.js"],"names":["createSlice","createAsyncThunk","authService","user","localStorage","getItem","initialState","isError","isSuccess","isLoading","message","register","thunkApi","error","response","data","toString","rejectWithValue","authenticate","logout","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport authService from \"./authService\";\n//Get user from localStorage\n\nconst user = localStorage.getItem('user')\nconst initialState = {\n    user: user ? user : null,\n    isError: false,\n    isSuccess: false,\n    isLoading: false,\n    message: ''\n}\n\nexport const register = createAsyncThunk('register', async (user, thunkApi) => {\n    try {\n        return await authService.register(user)\n    } catch (error) {\n        const message = ((error.response && error.response.data && error.response.data.message) || (error.message || error.toString()))\n        return thunkApi.rejectWithValue(message)\n\n    }\n})\n\n\nexport const authenticate = createAsyncThunk('authenticate', async (user, thunkApi) => {\n    try {\n        return await authService.authenticate(user)\n    } catch (error) {\n        const message = ((error.response && error.response.data && error.response.data.message) || (error.message || error.toString()))\n        return thunkApi.rejectWithValue(message)\n\n    }\n})\n\nexport const logout = createAsyncThunk('logout', async () => {\n    authService.logout()\n})\n\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        reset: (state) => {\n            state.isLoading = false\n            state.isError = false\n            state.isSuccess = false\n            state.message = ''\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(register.pending, (state) => {\n                state.isLoading = true\n            })\n            .addCase(register.fulfilled, (state, action) => {\n                state.isLoading = false\n                state.isSuccess = true\n                state.user = action.payload\n            })\n            .addCase(register.rejected, (state, action) => {\n                state.isLoading = false\n                state.isError = true\n                state.message = action.payload\n                state.user = null\n            })\n            .addCase(authenticate.pending, (state) => {\n                state.isLoading = true\n            })\n            .addCase(authenticate.fulfilled, (state, action) => {\n                state.isLoading = false\n                state.isSuccess = true\n                state.user = action.payload\n            })\n            .addCase(authenticate.rejected, (state, action) => {\n                state.isLoading = false\n                state.isError = action.payload\n                state.message = action.payload\n                state.user = null\n            })\n            .addCase(logout.fulfilled, (state) => {\n                state.user = null\n            })\n    },\n})\nexport const { reset } = authSlice.actions\nexport default authSlice.reducer"]},"metadata":{},"sourceType":"module"}