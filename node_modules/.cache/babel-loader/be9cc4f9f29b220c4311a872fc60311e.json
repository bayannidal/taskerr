{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"; //Get user from localStorage\n\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(logout.fulfilled, state => {\n      state.user = null;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/bayannidal/Coding Area/Redux/my-app/src/features/auth/authSlice.js"],"names":["createSlice","createAsyncThunk","user","JSON","parse","localStorage","getItem","initialState","isError","isSuccess","isLoading","message","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","register","pending","fulfilled","action","payload","rejected","login","logout","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n//Get user from localStorage\n\nconst user = JSON.parse(localStorage.getItem('user'))\nconst initialState = {\n    user: user ? user : null,\n    isError: false,\n    isSuccess: false,\n    isLoading: false,\n    message: ''\n}\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        reset: (state) => {\n            state.isLoading = false\n            state.isSuccess = false\n            state.isError = false\n            state.message = ''\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(register.pending, (state) => {\n                state.isLoading = true\n            })\n            .addCase(register.fulfilled, (state, action) => {\n                state.isLoading = false\n                state.isSuccess = true\n                state.user = action.payload\n            })\n            .addCase(register.rejected, (state, action) => {\n                state.isLoading = false\n                state.isError = true\n                state.message = action.payload\n                state.user = null\n            })\n            .addCase(login.pending, (state) => {\n                state.isLoading = true\n            })\n            .addCase(login.fulfilled, (state, action) => {\n                state.isLoading = false\n                state.isSuccess = true\n                state.user = action.payload\n            })\n            .addCase(login.rejected, (state, action) => {\n                state.isLoading = false\n                state.isError = true\n                state.message = action.payload\n                state.user = null\n            })\n            .addCase(logout.fulfilled, (state) => {\n                state.user = null\n            })\n    },\n})\n\nexport const { reset } = authSlice.actions\nexport default authSlice.reducer"]},"metadata":{},"sourceType":"module"}